https://medium.com/backticks-tildes/introduction-to-es6-modules-49956f580da

What are ES6 Modules?
Before now, it was impossible to directly reference or include one JavaScript file in another, 


What you should know!
Everything inside an ES6 module is private by default, and runs in strict mode (there’s no need for 'use strict').
Public variables, functions and classes are exposed using export.
Exposed modules are called into other modules using import
Modules must be included in your HTML with type="module", which can be an inline or external script tag.
    <script type="module" src="main.js"></script>
    <script type="module">
    // or an inline script
    </script>

How to use ES6 modules

For this article, let's create three files, (app.js ,math.js and max.js )

In math.js , let's write a basic arithmetic algorithm

    let sumAll = (a, b) => {return a + b;}
    let subtractAll = (a, b) => {return a - b;}
    let divideAll = (a, b) => {return a / b;}
    let multiplyAll = (a, b) => {return a * b;}
    let findModulus = (a, b) => {return a % b;}
Now to make this module accessible to other parts of our code, we need to export them. There are several ways of doing this;

You can export each module individually:
    export let sumAll = (a, b) => {return a + b;}
    export let subtractAll = (a, b) => {return a - b;}
    export let divideAll = (a, b) => {return a / b;}
    export let multiplyAll = (a, b) => {return a * b;}
    export let findModulus = (a, b) => {return a % b;}
A better way is to use a single export statement.
    let sumAll = (a, b) => {return a + b;}
    let subtractAll = (a, b) => {return a - b;}
    let divideAll = (a, b) => {return a / b;}
    let multiplyAll = (a, b) => {return a * b;}
    let findModulus = (a, b) => {return a % b;}
    export {sumAll, subtractAll, divideAll, multiplyAll, findModulus};

You can also export default values
    export default {sumAll, subtractAll, multiplyAll, divideAll};

You can import individually
    import {sumAll} from './math.js';
    Let's test our import

    console.log(sumAll(9, 8)); //17

You can import multiple modules at once:
    import {sumAll, subtractAll, divideAll} from './math.js';

You can import modules as aliases
In some computer operating systems and programming languages, an alias is an alternative and usually easier-to-understand or more significant name for a defined data object. More details here
    
    import * as math from './math.js';

Here we have imported all the modules in math.js and assigned them to the alias math . To use this imported module we do this:

console.log(math.sumAll(50, 10)); // 60
console.log(math.subtractAll(50, 10)); // 40
console.log(math.multiplyAll(50, 10)); // 500
console.log(math.divideAll(50, 10)); // 5
console.log(math.findModulus(50, 15)); // 5

You can also import default values
    import math from './math.js';
    console.log(math.sumAll(5, 2)); // 7

also import default values
import math from './math.js';
console.log(math.sumAll(5, 2)); // 7

Here we have imported sumAll() in math.js and assigned it to the alias math . There is no need to add * as here.

If you don’t export as default and you import using this method, you will get this error:
Uncaught SyntaxError: The requested module './math.js' does not provide an export named 'default'
To use this method, you must export sumAll() as default

export default {sumAll};

You can also use an absolute path for the module import, to reference modules defined on another domain:
import {sumAll} from 'https://bolaji-module.glitch.me/sumAll.js';
console.log(sumAll(50, 10)); // 60
Note: Modules are fetched using CORS. This means that if you reference scripts from other domains, they must have a valid CORS header that allows cross-site loading.
Modules are imported with either absolute or Relative references and must start with either “/”, “./”, or “../”.
    import {sumAll} from 'math.js'; ❌
    import {sumAll} from 'lib/max.js'; ❌
    import {sumAll} from './math.js'; ✔️
    import {sumAll} from '../max.js'; ✔️
    import {sumAll} from 'https://bolaji-module.glitch.me/sumAll.js'; ✔️


You can import several modules from different files, in our max.js add this:
let max = (a, b) => {
return (a > b) ? a : b;
}
export {max};

Now you can import max.js and math.js together in app.js

    import * as math from './math.js';
    import {max} from './max.js';
    console.log(max(50, 10)); // 50
    console.log(math.subtractAll(50, 10)); // 40
    console.log(math.multiplyAll(50, 10)); // 500
    console.log(math.divideAll(50, 10)); // 5
You can import multiple files but we must also remember that having more than a few modules is going to reduce our app’s performance , only use modules when needed.
Some Advantages of using modules

Code can be split into smaller files of self-contained functionality.
Multiple scripts can be concatenated thereby increasing performance.
Debugging becomes easier.


Any code referencing a module understands it is a dependency. If the module file is changed or moved, the problem is immediately obvious.
Modules (usually) helps eradicate naming conflicts. Function sumAll() in module1 cannot clash with Function sumAll() in module2. Aliases are very useful here, it becomes module1.sumAll() and module2.sumAll().
ES6 Modules are always executed in strict mode, so there is no need for ‘use strict’ .
ES6 modules help you to organize your code better


CONCLUSION
ES6 Modules are one of the biggest features introduced in modern browsers. Modern JavaScript frameworks like Vue JS and React JS use this feature.

You should also know that ES6 modules are not supported in all browsers. For production applications, transpilers like Webpack and Babel are used to convert our code from ES6 to ES5 to ensure cross-browser compatibility

In respect to this article, I would be writing two more articles tomorrow to show you how to use Babel as your transpiler (The article will cover an introduction guide to installing and setting up Babel) and how to efficiently work with node_modules in development and production.


